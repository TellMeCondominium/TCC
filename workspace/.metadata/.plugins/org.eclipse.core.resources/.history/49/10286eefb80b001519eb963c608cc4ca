package data.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import util.Conection;
import data.model.SubItem;

public class ServicoSubItemDAOImpl extends Conection implements ServicoSubItemDAO {

	 PreparedStatement pstmt;
	 Statement st;
	 ResultSet rs;
	 Connection con;

	public SubItem inserir(SubItem novo) throws Exception {
		try {
			//abre conexao com o banco
		    con = this.abreConexao();
		    con.setAutoCommit(false);  
		    //insere o registro
			String sql = "insert into sub_item values(?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, novo.getSubItemDescricao());
			pstmt.execute();
			
			//busca ID gerado para devolver entidade completa
			sql = "select @@identity as ID";
			st = con.createStatement();
			rs = st.executeQuery(sql);
	        while (rs.next()){
	        	novo.setIdSubItem(rs.getInt("ID"));
            }
	        con.commit();
	        con.setAutoCommit(true);  
	        con.close();
	        return novo;
		}
		catch (SQLException e) {
			if(e.getErrorCode() == 2627)
				throw new Exception("Não foi possível inserir o registro/ Registro já existe.");
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		finally{
			con.close();
		}
		
	}
	
	public void alterar(Integer idSubItem,SubItem subItem) throws Exception
	{
		try {
			//abre conexao com o banco
		    con = this.abreConexao();
		    SubItem verifica = this.obter(subItem.getSubItemDescricao());
		    if(verifica.getSubItemDescricao() != null)
		    	throw new Exception("Já existe um sub item com o nome informado.");
		    String sql = "update SUB_ITEM set SUB_ITEM_DESCRICAO = ? where ID_SUB_ITEM = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, subItem.getSubItemDescricao());
			pstmt.setInt(2, idSubItem);
			pstmt.execute();
			
	        con.close();
		} 
		catch(SQLIntegrityConstraintViolationException e){
			throw new Exception("Não é possível alterar o sub item informado.");
		}
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		finally{
			con.close();
		}
	}
	
	public void remover(Integer idSubItem) throws Exception {
		try {
			//abre conexao com o banco
		    con = this.abreConexao();

		    String sql = "delete from SUB_ITEM where SUB_ITEM_DESCRICAO = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, idSubItem);
			pstmt.execute();
			
	        con.close();
		} 
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		finally{
			con.close();
		}
	}
	
	public SubItem obter(Integer id) throws Exception {
		try {
			con = this.abreConexao();
			
			SubItem retorno = new SubItem();
			
			if (id == null )
				throw new Exception("Informe o ID para obter o SubItem");
			
			String sql = "SELECT * FROM SUB_ITEM WHERE ID_SUB_ITEM = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, id);

			rs = pstmt.executeQuery();

			if (rs.getFetchSize() > 0 ) {
				rs.next();
				retorno = new SubItem(rs.getInt("ID_SUB_ITEM"), rs.getString("SUB_ITEM_DESCRICAO"));
			}
			return retorno;
		} 
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		} 
		catch (Exception e) {
			throw new Exception(e.getMessage());
		} 
		finally {
			con.close();
		}
	}
	
	public SubItem obter(String descricao) throws Exception {
		try {
			con = this.abreConexao();
			
			SubItem retorno = new SubItem();
			
			if (descricao == null || descricao == "")
				throw new Exception("Informe a descriçao para obter o SubItem");
			
			String sql = "SELECT * FROM SUB_ITEM WHERE SUB_ITEM_DESCRICAO = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1,  descricao);

			rs = pstmt.executeQuery();

			if (rs.getFetchSize() > 0 ) {
				rs.next();
				retorno = new SubItem(rs.getInt("ID_SUB_ITEM"), rs.getString("SUB_ITEM_DESCRICAO"));
			}
			return retorno;
		} 
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		} 
		catch (Exception e) {
			throw new Exception(e.getMessage());
		} 
		finally {
			con.close();
		}
	}
	
	public SubItem[] listar() throws Exception {
		try {
			con = this.abreConexao();
			
			List<SubItem> listaSubItens = new ArrayList<SubItem>();
			
			
			String sql = "SELECT * FROM SUB_ITEM ORDER BY ID_SUB_ITEM";
			pstmt = con.prepareStatement(sql);

			rs = pstmt.executeQuery();
			while (rs.next()) {
				SubItem subItem = new SubItem(rs.getInt("ID_SUB_ITEM"), rs.getString("SUB_ITEM_DESCRICAO"));
				listaSubItens.add(subItem); 
			}
			SubItem[] retorno =  listaSubItens.toArray(new SubItem[0]);
			return retorno;
		}
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		} 
		finally {
			con.close();
		}
		
	}
}

package data.dao;

import java.security.Key;
import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;

import util.Conection;
import data.model.Morador;

public class ServicoMoradorDAOImpl extends Conection implements ServicoMoradorDAO {

	 PreparedStatement pstmt;
	 Statement st;
	 ResultSet rs;
	 Connection con;
	 private String ALGORITMO = "AES/CTR/NoPadding";
	 private Key chaveAES;
	 private IvParameterSpec ivps;
	 

	public Morador inserir(Morador novo) throws Exception {
		try {
			//abre conexao com o banco
		    con = this.abreConexao();
		    con.setAutoCommit(false);  
		    //insere o registro
			String sql = "INSERT INTO MORADOR VALUES(?, ?, ?, ?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, novo.getCpf());
			pstmt.setString(2, novo.getNome());
			pstmt.setString(3, novo.getEmail());
			pstmt.setString(4, this.criptografarSenha(novo.getSenha()));
			pstmt.execute();
			
			//busca ID gerado para devolver entidade completa
			sql = "select @@identity as ID";
			st = con.createStatement();
			rs = st.executeQuery(sql);
	        while (rs.next()){
	        	novo.setIdMorador(rs.getInt("ID"));
            }
	        con.commit();
	        con.setAutoCommit(true);  
	        con.close();
	        return novo;
		} 
		catch (SQLException e) {
			if(e.getErrorCode() == 2627)
				throw new Exception("Não foi possível inserir o registro/ Registro já existe.");
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		finally{
			con.close();
		}
	}
	
	public void alterar(Integer id, Morador morador) throws Exception
	{
		try {
			//abre conexao com o banco
		    con = this.abreConexao();

		    String sql = "UPDATE MORADOR SET /n/r"+
							" CPF = ?, NOME = ?, EMAIL = ?, SENHA = ? /n/r"+
							" WHERE ID_MORADOR = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, morador.getCpf());
			pstmt.setString(2, morador.getNome());
			pstmt.setString(3, morador.getEmail());
			pstmt.setString(4, this.criptografarSenha(morador.getSenha()));
			pstmt.setInt(5, id);
			pstmt.execute();
			
	        con.close();
		} 
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		finally{
			con.close();
		}
	}
	
	public void remover(Integer id) throws Exception {
		try {
			//abre conexao com o banco
		    con = this.abreConexao();

		    String sql = "DELETE FROM MORADOR WHERE ID_MORADOR = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, id);
			pstmt.execute();
			
	        con.close();
		} 
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		finally{
			con.close();
		}
	}
	
	public Morador obter(Integer id, String email, String cpf) throws Exception {
		try {
			con = this.abreConexao();
			
			Morador retorno = new Morador();
			
			if (id == null && (email == null || email == "") &&
					(cpf == null || cpf == ""))
				throw new Exception("Informe o ID, e-mail ou CPF para obter os dados.");
			
			String sql = "SELECT * FROM MORADOR ";
			if (id != null){
				sql += " WHERE ID_MORADOR = ?";
			}
			else if (email != null && email != ""){
				sql += " WHERE EMAIL = ?";
			}
			else{
				sql += " WHERE CPF = ?";
			}
			pstmt = con.prepareStatement(sql);
			if (id != null){
				pstmt.setInt(1, id);
			}
			else if (email != null && email != ""){
				pstmt.setString(1, email);
			}
			else{
				pstmt.setString(1, cpf);
			}

			rs = pstmt.executeQuery();

			if(rs.next())
				retorno = new Morador(rs.getInt("ID_MORADOR"), rs.getString("CPF"),
						rs.getString("NOME"), rs.getString("EMAIL"), rs.getString("SENHA"));
			return retorno;
		} 
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		} 
		catch (Exception e) {
			throw new Exception(e.getMessage());
		} finally {
			con.close();
		}
	}
	
	public void alterarSenha(String email, String cpf, String senhaAntiga, String senhaNova) 
			throws Exception{
		if((email == null || email == "") && (cpf == null || cpf == ""))
			throw new Exception("Informe o email ou o CPF para alterar a senha.");
		
		if(senhaAntiga == null || senhaAntiga == "")
			throw new Exception("Informe a senha antiga para alterar a senha.");
		
		if(senhaNova == null || senhaNova == "")
			throw new Exception("Informe a senha nova para alterar a senha.");
		
		Morador morador = this.obter(null, email, cpf);
		
		senhaAntiga = this.criptografarSenha(senhaAntiga);
		
		if(!morador.getSenha().equals(senhaAntiga))
			throw new Exception("Senha antiga não confere.");
		
		this.alterar(morador.getIdMorador(), morador);
	}
	
	public Boolean validaLoginMorador(String email, String cpf, String senha) throws Exception{
		if((email == null || email == "") && (cpf == null || cpf == ""))
			throw new Exception("Informe o email ou o CPF para login.");
		
		if(senha == null || senha == "")
			throw new Exception("Informe a senha para login.");
		
		Morador morador = this.obter(null, email, cpf);
		if(morador.getSenha().equals(this.criptografarSenha(senha)))
			return true;
		return false;
	}
	
	public Morador[] listar(Integer id, String cpf, String nome, String email) throws Exception {
		try {
			con = this.abreConexao();
			
			List<Morador> lista = new ArrayList<Morador>();
			
			String sql = "SELECT * FROM MORADOR WHERE 1 = 1 ";
			if(id != null)
				sql+= " AND ID_MORADOR = " + id;
			if(cpf != null && cpf != "")
				sql+= " AND CPF = '" + cpf + "' ";
			if(nome != null && nome != "")
				sql+= " AND NOME = '" + nome + "' ";
			if(email != null && email != "")
				sql+= " AND EMAIL = '" + email + "' ";
			
			pstmt = con.prepareStatement(sql);

			rs = pstmt.executeQuery();
			while (rs.next()) {
				lista.add(new Morador(rs.getInt("ID_MORADOR"), rs.getString("CPF"),
						rs.getString("NOME"), rs.getString("EMAIL"), rs.getString("SENHA"))); 
			}
			Morador[] retorno =  lista.toArray(new Morador[0]);
			return retorno;
		}
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		} 
		finally {
			con.close();
		}
	}
	
	private String criptografarSenha(String senha) throws Exception{
		
		try {
			Cipher c = Cipher.getInstance(ALGORITMO);
			c.init(Cipher.ENCRYPT_MODE, chaveAES, ivps); 
			
			byte[] senhaCriptografada = c.doFinal(senha.getBytes());
			return senhaCriptografada.toString();
		} 
		catch (Exception e) {
			throw new Exception("Erro ao criptografar a senha.");
		}
	}
	
	private String descriptografarSenha(String senha) throws Exception{
		
		try {
			Cipher c = Cipher.getInstance(ALGORITMO);
			c.init(Cipher.DECRYPT_MODE, chaveAES, ivps); 
			
			byte[] senhaCriptografada = c.doFinal(senha.getBytes());
			return senhaCriptografada.toString();
		} 
		catch (Exception e) {
			throw new Exception("Erro ao criptografar a senha.");
		}
	}

}

package data.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import util.Conection;
import data.model.EmpresaPrestadora;

public class ServicoEmpresaPrestadoraDAOImpl extends Conection implements ServicoEmpresaPrestadoraDAO {

	 PreparedStatement pstmt;
	 Statement st;
	 ResultSet rs;
	 Connection con;

	public EmpresaPrestadora inserir(EmpresaPrestadora novo) throws Exception {
		try {
			//abre conexao com o banco
		    con = this.abreConexao();
		    con.setAutoCommit(false);  
		    //insere o registro
			String sql = "INSERT INTO EMPRESA_PRESTADORA VALUES(?, ?, ?, ?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, novo.getNome());
			pstmt.setString(2, novo.getEmail());
			pstmt.setString(3, novo.getSitePrestador());
			pstmt.setInt(4, novo.getIdCategoriaPrestador());
			pstmt.execute();
			
			//busca ID gerado para devolver entidade completa
			sql = "select @@identity as ID";
			st = con.createStatement();
			rs = st.executeQuery(sql);
	        while (rs.next()){
	        	novo.setIdPrestador(rs.getInt("ID"));
            }
	        con.commit();
	        con.setAutoCommit(true);  
	        con.close();
	        return novo;
		} 
		catch (SQLException e) {
			if(e.getErrorCode() == 2627)
				throw new Exception("Não foi possível inserir o registro/ Registro já existe.");
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		finally{
			con.close();
		}
	}
	
	public void alterar(Integer id, EmpresaPrestadora empresaPrestadora) throws Exception
	{
		try {
			//abre conexao com o banco
		    con = this.abreConexao();

		    String sql = "UPDATE EMPRESA_PRESTADORA SET /n/r"+
							" NOME = ?, EMAIL = ?, SITE_PRESTADOR = ?, ID_CATEGORIA = ? /n/r"+
							" WHERE ID_PRESTADOR = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, empresaPrestadora.getNome());
			pstmt.setString(2, empresaPrestadora.getEmail());
			pstmt.setString(3, empresaPrestadora.getSitePrestador());
			pstmt.setInt(4, empresaPrestadora.getIdCategoriaPrestador());
			pstmt.setInt(5, id);
			pstmt.execute();
			
	        con.close();
		} 
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		finally{
			con.close();
		}
	}
	
	public void remover(Integer id) throws Exception {
		try {
			//abre conexao com o banco
		    con = this.abreConexao();

		    String sql = "DELETE FROM EMPRESA_PRESTADORA WHERE ID_PRESTADOR = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, id);
			pstmt.execute();
			
	        con.close();
		} 
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		finally{
			con.close();
		}
	}
	
	public EmpresaPrestadora obter(Integer id) throws Exception {
		try {
			con = this.abreConexao();
			
			EmpresaPrestadora retorno = new EmpresaPrestadora();
			
			if (id == null )
				throw new Exception("Informe o ID para obter os dados.");
			
			String sql = "SELECT * FROM EMPRESA_PRESTADORA WHERE ID_PRESTADOR = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, id);

			rs = pstmt.executeQuery();

			if (rs.getFetchSize() > 0 ) {
				rs.next();
				retorno = new EmpresaPrestadora(rs.getInt("ID_PRESTADOR"), 
						rs.getInt("ID_CATEGORIA"), rs.getString("NOME"),
						rs.getString("EMAIL"), rs.getString("SITE_PRESTADOR"));
			}
			return retorno;
		} 
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		} 
		catch (Exception e) {
			throw new Exception(e.getMessage());
		} finally {
			con.close();
		}
	}
	
	public EmpresaPrestadora[] listar(Integer id, String nome, String email, String site,
			Integer idCategoria) throws Exception {
		try {
			con = this.abreConexao();
			
			List<EmpresaPrestadora> lista = new ArrayList<EmpresaPrestadora>();
			
			String sql = "SELECT * FROM EMPRESA_PRESTADORA WHERE 1 = 1 ";
			if(id != null)
				sql+= " AND ID_PRESTADOR = " + id;
			if(nome != null && nome != "")
				sql+= " AND NOME = '" + nome + "' ";
			if(email != null && email != "")
				sql+= " AND EMAIL = '" + email + "' ";
			if(site != null && site != "")
				sql+= " AND SITE_PRESTADOR = '" + site + "' ";
			if(idCategoria != null)
				sql+= " AND ID_CATEGORIA = " + idCategoria;
			
			pstmt = con.prepareStatement(sql);

			rs = pstmt.executeQuery();
			while (rs.next()) {
				lista.add(new EmpresaPrestadora(rs.getInt("ID_PRESTADOR"), 
						rs.getInt("ID_CATEGORIA"), rs.getString("NOME"),
						rs.getString("EMAIL"), rs.getString("SITE_PRESTADOR"))); 
			}
			EmpresaPrestadora[] retorno =  lista.toArray(new EmpresaPrestadora[0]);
			return retorno;
		}
		catch (SQLException e) {
			throw new Exception(e.getMessage());
		}
		catch (Exception e) {
			throw new Exception(e.getMessage());
		} 
		finally {
			con.close();
		}
	}

}
